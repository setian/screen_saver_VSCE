{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst FALLBACK_SNIPPETS = [\n    {\n        code: '// Offline snippet \u00B7 JavaScript matrix rain demo\\n' +\n            'class MatrixRain {\\n' +\n            '  constructor(canvas, speed = 50) {\\n' +\n            '    this.canvas = canvas;\\n' +\n            '    this.ctx = canvas.getContext(\\'2d\\');\\n' +\n            '    this.fontSize = 16;\\n' +\n            '    this.columns = Math.floor(canvas.width / this.fontSize);\\n' +\n            '    this.drops = Array.from({ length: this.columns }).fill(canvas.height);\\n' +\n            '    this.speed = speed;\\n' +\n            '  }\\n\\n' +\n            '  draw() {\\n' +\n            '    this.ctx.fillStyle = \\'rgba(0, 0, 0, 0.05)\\';\\n' +\n            '    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\\n' +\n            '    this.ctx.fillStyle = \\'#0F0\\';\\n' +\n            '    this.ctx.font = `${this.fontSize}px monospace`;\\n' +\n            '    this.drops.forEach((dropY, column) => {\\n' +\n            '      const char = String.fromCharCode(33 + Math.random() * 94);\\n' +\n            '      const x = column * this.fontSize;\\n' +\n            '      const y = dropY * this.fontSize;\\n' +\n            '      this.ctx.fillText(char, x, y);\\n' +\n            '      this.drops[column] = dropY * this.fontSize > this.canvas.height && Math.random() > 0.975 ? 0 : dropY + 1;\\n' +\n            '    });\\n' +\n            '  }\\n\\n' +\n            '  animate() {\\n' +\n            '    setInterval(() => this.draw(), this.speed);\\n' +\n            '  }\\n' +\n            '}',\n        languageId: 'javascript'\n    },\n    {\n        code: '# Offline snippet \u00B7 Python one-liner trivia\\n' +\n            'text = \"banana\"\\n' +\n            'print(\"\uB0B4\uB9BC\uCC28\uC21C\uC815\uB82C:\", \"\".join(sorted(text, reverse=True)))\\n' +\n            'print(\"\uBAA8\uB450 a \uD3EC\uD568?:\", all(ch == \"a\" for ch in text))\\n' +\n            'print(\"\uD558\uB098\uB77C\uB3C4 b \uD3EC\uD568?:\", any(ch == \"b\" for ch in text))\\n' +\n            'print(\"\uC5ED\uC21C:\", text[::-1])',\n        languageId: 'python'\n    },\n    {\n        code: '# Offline snippet \u00B7 Python context manager\\n' +\n            'from pathlib import Path\\n\\n' +\n            'def read_config(path: Path) -> str:\\n' +\n            '    with path.open() as handle:\\n' +\n            '        return handle.read().strip()\\n\\n' +\n            'print(read_config(Path(\"settings.ini\")))',\n        languageId: 'python'\n    },\n    {\n        code: '// Offline snippet \u00B7 JavaScript console tricks\\n' +\n            'const squares = Array.from({ length: 5 }, (_, i) => ({ i, square: i * i }));\\n' +\n            'console.table(squares);\\n' +\n            'console.log(\"isFinite?\", Number.isFinite(42 / 0));',\n        languageId: 'javascript'\n    },\n    {\n        code: '# Offline snippet \u00B7 JavaScript debounce utility\\n' +\n            'function debounce(fn, delay = 200) {\\n' +\n            '  let timer;\\n' +\n            '  return (...args) => {\\n' +\n            '    clearTimeout(timer);\\n' +\n            '    timer = setTimeout(() => fn(...args), delay);\\n' +\n            '  };\\n' +\n            '}\\n\\n' +\n            'const log = debounce(value => console.log(\"\uAC80\uC0C9:\", value), 300);\\nlog(\"hello\");',\n        languageId: 'javascript'\n    },\n    {\n        code: '/* Offline snippet \u00B7 C \uB9E4\uD06C\uB85C\uC640 \uD3EC\uC778\uD130 \uCC4C\uB9B0\uC9C0 */\\n#include <stdio.h>\\n\\n#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))\\n\\nint main(void) {\\n    const char *words[] = {\"VS\", \"Code\", \"Screensaver\"};\\n    for (size_t i = 0; i < ARRAY_SIZE(words); ++i) {\\n        printf(\"%zu -> %s\\\\n\", i, *(words + i));\\n    }\\n    return 0;\\n}',\n        languageId: 'c'\n    },\n    {\n        code: '/* Offline snippet \u00B7 C \uBA54\uBAA8\uB9AC \uB364\uD504 */\\n#include <stdio.h>\\n\\nvoid dump(const void *data, size_t len) {\\n    const unsigned char *bytes = data;\\n    for (size_t i = 0; i < len; ++i) {\\n        printf(\"%02X%s\", bytes[i], (i + 1) % 8 ? \" \" : \"\\\\n\");\\n    }\\n}\\n\\nint main(void) {\\n    int value = 0x12345678;\\n    dump(&value, sizeof value);\\n    return 0;\\n}',\n        languageId: 'c'\n    },\n    {\n        code: '# Offline snippet \u00B7 Rust Option pattern\\nfn main() {\\n    let config = std::env::var(\"SCREENSAVER_THEME\").ok();\\n    match config.as_deref() {\\n        Some(\"matrix\") => println!(\"\uB9E4\uD2B8\uB9AD\uC2A4 \uBAA8\uB4DC\"),\\n        Some(other) => println!(\"\uD14C\uB9C8: {}\", other),\\n        None => println!(\"\uAE30\uBCF8 \uD14C\uB9C8\"),\\n    }\\n}',\n        languageId: 'rust'\n    },\n    {\n        code: '// Offline snippet \u00B7 TypeScript \uD0C0\uC785 \uD034\uC988\\n' +\n            'type Flatten<T> = T extends Array<infer U> ? U : T;\\n' +\n            'type Result = Flatten<number[]>; // Result\uB294 number\\n' +\n            'const result: Result = 123;',\n        languageId: 'typescript'\n    },\n    {\n        code: '# Offline snippet \u00B7 Brainfuck Hello World\\n' +\n            '++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.',\n        languageId: 'brainfuck'\n    },\n    {\n        code: '// Offline snippet \u00B7 Plaintext \uD034\uC988\\n' +\n            'print(\"\".join(sorted(\"banana\")))  # \uACB0\uACFC\uB294?\\n' +\n            '# \uBC84\uD2BC\uC744 \uB204\uB974\uBA74 \uC815\uB2F5! -> aaabnn',\n        languageId: 'plaintext'\n    }\n];\n\nlet webviewPanel: vscode.WebviewPanel | undefined;\nlet idleTimer: NodeJS.Timeout | undefined;\nlet lastRepositoryKey: string | undefined;\nlet lastKnownLanguageId = 'plaintext';\nconst repoCooldowns = new Map<string, number>();\n\n// --- Repository cache ---\ninterface RepoFileEntry {\n    path: string;\n    size: number;\n}\n\nconst REPO_CACHE_DURATION_MS = 6 * 60 * 60 * 1000; // 6 hours\n\nconst LANGUAGE_ALIASES: Record<string, string> = {\n    'javascriptreact': 'javascript',\n    'typescriptreact': 'typescript',\n    'react': 'javascript',\n    'c++': 'cpp',\n    'objective-c++': 'cpp',\n    'objective-c': 'c',\n    'shellscript': 'shell',\n    'jsonc': 'json'\n};\n\nconst LANGUAGE_EXTENSION_MAP: Record<string, string[]> = {\n    'c': ['.c', '.h'],\n    'cpp': ['.cc', '.cpp', '.cxx', '.hpp', '.hh', '.hxx'],\n    'go': ['.go'],\n    'java': ['.java'],\n    'javascript': ['.js', '.jsx', '.mjs', '.cjs'],\n    'json': ['.json'],\n    'kotlin': ['.kt'],\n    'ruby': ['.rb'],\n    'python': ['.py'],\n    'rust': ['.rs'],\n    'swift': ['.swift'],\n    'scala': ['.scala'],\n    'shell': ['.sh'],\n    'typescript': ['.ts', '.tsx'],\n    'yaml': ['.yml', '.yaml'],\n    'plaintext': ['.md', '.markdown', '.txt'],\n    'brainfuck': ['.bf']\n};\n\nconst KNOWN_TEXT_EXTENSIONS = new Set(Object.values(LANGUAGE_EXTENSION_MAP).flat());\n\nconst MAX_REPO_ATTEMPTS = 6;\nconst NON_PRINTABLE_THRESHOLD = 0.12;\n\nfunction logWithTimestamp(\n    message: string,\n    level: 'log' | 'warn' | 'error' = 'log',\n    ...optionalParams: unknown[]\n): void {\n    const timestamp = new Date().toLocaleTimeString();\n    const formattedMessage = `[${timestamp}] ${message}`;\n    switch (level) {\n        case 'warn':\n            console.warn(formattedMessage, ...optionalParams);\n            break;\n        case 'error':\n            console.error(formattedMessage, ...optionalParams);\n            break;\n        default:\n            console.log(formattedMessage, ...optionalParams);\n            break;\n    }\n}\n\ninterface SnippetRepository {\n    label: string;\n    owner: string;\n    repo: string;\n    branch?: string;\n    license: string;\n    licenseUrl?: string;\n    languages: string[];\n}\n\ninterface RepoCache {\n    entries: RepoFileEntry[];\n    timestamp: number;\n    branch: string;\n}\n\nconst SNIPPET_REPOSITORIES: SnippetRepository[] = [\n    {\n        label: 'TheAlgorithms \u00B7 Python',\n        owner: 'TheAlgorithms',\n        repo: 'Python',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/TheAlgorithms/Python/blob/master/LICENSE',\n        languages: ['python']\n    },\n    {\n        label: 'TheAlgorithms \u00B7 JavaScript',\n        owner: 'TheAlgorithms',\n        repo: 'JavaScript',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/TheAlgorithms/JavaScript/blob/master/LICENSE',\n        languages: ['javascript', 'typescript']\n    },\n    {\n        label: 'TheAlgorithms \u00B7 Java',\n        owner: 'TheAlgorithms',\n        repo: 'Java',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/TheAlgorithms/Java/blob/master/LICENSE',\n        languages: ['java']\n    },\n    {\n        label: 'TheAlgorithms \u00B7 C',\n        owner: 'TheAlgorithms',\n        repo: 'C',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/TheAlgorithms/C/blob/main/LICENSE',\n        languages: ['c']\n    },\n    {\n        label: 'TheAlgorithms \u00B7 C++',\n        owner: 'TheAlgorithms',\n        repo: 'C-Plus-Plus',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/LICENSE',\n        languages: ['cpp']\n    },\n    {\n        label: 'TheAlgorithms \u00B7 Go',\n        owner: 'TheAlgorithms',\n        repo: 'Go',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/TheAlgorithms/Go/blob/master/LICENSE',\n        languages: ['go']\n    },\n    {\n        label: 'TheAlgorithms \u00B7 Rust',\n        owner: 'TheAlgorithms',\n        repo: 'Rust',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/TheAlgorithms/Rust/blob/master/LICENSE',\n        languages: ['rust']\n    },\n    {\n        label: 'TheAlgorithms \u00B7 Kotlin',\n        owner: 'TheAlgorithms',\n        repo: 'Kotlin',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/TheAlgorithms/Kotlin/blob/master/LICENSE',\n        languages: ['kotlin']\n    },\n    {\n        label: '30 Seconds of Code',\n        owner: '30-seconds',\n        repo: '30-seconds-of-code',\n        license: 'CC0 1.0 Universal',\n        licenseUrl: 'https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE',\n        languages: ['javascript', 'typescript', 'react']\n    },\n    {\n        label: '1loc',\n        owner: 'phuoc-ng',\n        repo: '1loc',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/phuoc-ng/1loc/blob/master/LICENSE',\n        languages: ['javascript']\n    },\n    {\n        label: 'leachim6 \u00B7 Hello World',\n        owner: 'leachim6',\n        repo: 'hello-world',\n        license: 'CC BY 4.0',\n        licenseUrl: 'https://github.com/leachim6/hello-world/blob/master/LICENSE',\n        languages: ['plaintext', 'c', 'cpp', 'java', 'javascript', 'python', 'ruby', 'go', 'rust', 'swift', 'kotlin', 'brainfuck']\n    },\n    {\n        label: 'LydiaHallie \u00B7 JavaScript Questions',\n        owner: 'lydiahallie',\n        repo: 'javascript-questions',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/lydiahallie/javascript-questions/blob/main/LICENSE',\n        languages: ['javascript', 'typescript', 'plaintext']\n    },\n    {\n        label: 'denysdovhan \u00B7 wtfjs',\n        owner: 'denysdovhan',\n        repo: 'wtfjs',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/denysdovhan/wtfjs/blob/master/LICENSE',\n        languages: ['javascript', 'typescript', 'plaintext']\n    },\n    {\n        label: 'satwikkansal \u00B7 wtfpython',\n        owner: 'satwikkansal',\n        repo: 'wtfpython',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/satwikkansal/wtfpython/blob/master/LICENSE',\n        languages: ['python', 'plaintext']\n    },\n    {\n        label: '30 Seconds of Interviews',\n        owner: '30-seconds',\n        repo: '30-seconds-of-interviews',\n        license: 'MIT',\n        licenseUrl: 'https://github.com/30-seconds/30-seconds-of-interviews/blob/master/LICENSE',\n        languages: ['javascript', 'typescript', 'plaintext']\n    },\n    {\n        label: 'awesome-programming-quotes',\n        owner: 'ashishb',\n        repo: 'awesome-programming-quotes',\n        license: 'See repository license',\n        licenseUrl: 'https://github.com/ashishb/awesome-programming-quotes',\n        languages: ['plaintext']\n    },\n    {\n        label: 'programming-memes',\n        owner: 'abhisheknaiidu',\n        repo: 'programming-memes',\n        license: 'See repository license',\n        licenseUrl: 'https://github.com/abhisheknaiidu/programming-memes',\n        languages: ['plaintext']\n    }\n];\n\nconst LANGUAGE_TO_REPOSITORIES = SNIPPET_REPOSITORIES.reduce<Record<string, SnippetRepository[]>>((acc, repository) => {\n    for (const lang of repository.languages) {\n        if (!acc[lang]) {\n            acc[lang] = [];\n        }\n        acc[lang].push(repository);\n    }\n    return acc;\n}, {});\n\nconst repoCaches = new Map<string, RepoCache>();\nconst repoBranchCache = new Map<string, string>();\n\nfunction normalizeLanguageId(languageId: string | undefined): string {\n    if (!languageId) {\n        return 'plaintext';\n    }\n    const lowered = languageId.toLowerCase();\n    return LANGUAGE_ALIASES[lowered] ?? lowered;\n}\n\nfunction getActiveOrLastLanguageId(): string {\n    const activeEditorLanguage = vscode.window.activeTextEditor?.document.languageId;\n    if (activeEditorLanguage) {\n        lastKnownLanguageId = activeEditorLanguage;\n    }\n    return lastKnownLanguageId;\n}\n\nfunction getExtensionsForLanguage(languageId: string): string[] {\n    return LANGUAGE_EXTENSION_MAP[languageId] ?? [];\n}\n\nfunction inferLanguageFromPath(filePath: string): string | undefined {\n    const extension = path.extname(filePath).toLowerCase();\n    if (!extension) {\n        return undefined;\n    }\n\n    for (const [language, extensions] of Object.entries(LANGUAGE_EXTENSION_MAP)) {\n        if (extensions.includes(extension)) {\n            return language;\n        }\n    }\n\n    return undefined;\n}\n\nfunction isRepoFileMetadataSafe(filePath: string, size: number | undefined): boolean {\n    const lowerPath = filePath.toLowerCase();\n    const fileExtension = path.extname(lowerPath);\n\n    if (fileExtension && !KNOWN_TEXT_EXTENSIONS.has(fileExtension)) {\n        return false;\n    }\n\n    if (typeof size === 'number' && size > 120000) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction isContentSafe(content: string): boolean {\n    if (!content || typeof content !== 'string') {\n        return false;\n    }\n\n    return !hasBinarySignature(content);\n}\n\nfunction hasBinarySignature(content: string): boolean {\n    if (!content.length) {\n        return false;\n    }\n\n    let nonPrintable = 0;\n    for (let i = 0; i < content.length; i++) {\n        const code = content.charCodeAt(i);\n        if (code === 9 || code === 10 || code === 13) {\n            continue;\n        }\n\n        if (code === 0 || code === 65533 || code < 32) {\n            nonPrintable++;\n        }\n    }\n\n    return (nonPrintable / content.length) > NON_PRINTABLE_THRESHOLD;\n}\n\nfunction shuffle<T>(items: T[]): T[] {\n    const clone = [...items];\n    for (let i = clone.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [clone[i], clone[j]] = [clone[j], clone[i]];\n    }\n    return clone;\n}\n\nfunction getRepoCacheKey(repository: SnippetRepository): string {\n    return `${repository.owner}/${repository.repo}`;\n}\n\nfunction setRepositoryCooldown(repository: SnippetRepository, resetEpochMs?: number) {\n    const key = getRepoCacheKey(repository);\n    const now = Date.now();\n    const cooldownUntil = typeof resetEpochMs === 'number' && resetEpochMs > now\n        ? resetEpochMs\n        : now + 15 * 60 * 1000;\n    repoCooldowns.set(key, cooldownUntil);\n    const resumeAt = new Date(cooldownUntil).toLocaleTimeString();\n    logWithTimestamp(`GitHub rate limit hit for ${repository.label}. Cooling down until ${resumeAt}.`, 'warn');\n}\n\nfunction isRepositoryOnCooldown(repository: SnippetRepository): boolean {\n    const key = getRepoCacheKey(repository);\n    const until = repoCooldowns.get(key);\n    if (!until) {\n        return false;\n    }\n    if (Date.now() < until) {\n        return true;\n    }\n    repoCooldowns.delete(key);\n    return false;\n}\n\nasync function resolveBranch(repository: SnippetRepository): Promise<string> {\n    const cacheKey = getRepoCacheKey(repository);\n    if (repoBranchCache.has(cacheKey)) {\n        return repoBranchCache.get(cacheKey)!;\n    }\n\n    if (repository.branch) {\n        repoBranchCache.set(cacheKey, repository.branch);\n        return repository.branch;\n    }\n\n    const repoMetaUrl = `https://api.github.com/repos/${repository.owner}/${repository.repo}`;\n    try {\n        const response = await fetch(repoMetaUrl);\n        if (response.status === 403) {\n            const resetHeader = response.headers.get('X-RateLimit-Reset');\n            const resetEpochMs = resetHeader ? parseInt(resetHeader, 10) * 1000 : undefined;\n            setRepositoryCooldown(repository, resetEpochMs);\n            throw new Error('GitHub API rate limit exceeded');\n        }\n        if (response.ok) {\n            const data = await response.json();\n            const defaultBranch = typeof data?.default_branch === 'string' ? data.default_branch : 'master';\n            repoBranchCache.set(cacheKey, defaultBranch);\n            return defaultBranch;\n        }\n        logWithTimestamp(\n            `Failed to resolve default branch for ${repository.label}. Falling back to 'master'.`,\n            'warn'\n        );\n    } catch (error: any) {\n        logWithTimestamp(`Error resolving branch for ${repository.label}.`, 'warn', error);\n    }\n\n    repoBranchCache.set(cacheKey, 'master');\n    return 'master';\n}\n\nfunction buildTreeUrl(repository: SnippetRepository, branch: string): string {\n    return `https://api.github.com/repos/${repository.owner}/${repository.repo}/git/trees/${branch}?recursive=1`;\n}\n\nfunction buildRawUrl(repository: SnippetRepository, branch: string, filePath: string): string {\n    return `https://raw.githubusercontent.com/${repository.owner}/${repository.repo}/${branch}/` +\n        encodeURI(filePath).replace(/#/g, '%23');\n}\n\nfunction buildLicenseHeader(repository: SnippetRepository, branch: string, filePath: string): string {\n    const source = `// Source: https://github.com/${repository.owner}/${repository.repo}/blob/${branch}/${filePath}`;\n    const license = repository.licenseUrl\n        ? `// License: ${repository.license} (${repository.licenseUrl})`\n        : `// License: ${repository.license}`;\n    return `${source}\\n${license}\\n\\n`;\n}\n\nfunction removeRepoFileFromCache(repository: SnippetRepository, filePath: string) {\n    const cacheKey = getRepoCacheKey(repository);\n    const cache = repoCaches.get(cacheKey);\n    if (!cache) {\n        return;\n    }\n\n    cache.entries = cache.entries.filter(entry => entry.path !== filePath);\n    repoCaches.set(cacheKey, cache);\n}\n\nasync function refreshRepoCache(repository: SnippetRepository): Promise<void> {\n    try {\n        const branch = await resolveBranch(repository);\n        logWithTimestamp(`Fetching repository tree from GitHub for ${repository.label} (${branch}).`);\n        const response = await fetch(buildTreeUrl(repository, branch));\n        if (response.status === 403) {\n            const resetHeader = response.headers.get('X-RateLimit-Reset');\n            const resetEpochMs = resetHeader ? parseInt(resetHeader, 10) * 1000 : undefined;\n            setRepositoryCooldown(repository, resetEpochMs);\n            repoCaches.delete(getRepoCacheKey(repository));\n            return;\n        }\n        if (!response.ok) {\n            throw new Error(`Failed to fetch repository tree: ${response.status}`);\n        }\n\n        const data = await response.json();\n        const treeEntries = Array.isArray(data?.tree) ? data.tree : [];\n\n        const freshEntries: RepoFileEntry[] = treeEntries\n            .filter((entry: any) => entry?.type === 'blob' && typeof entry?.path === 'string')\n            .map((entry: any) => ({\n                path: entry.path as string,\n                size: typeof entry.size === 'number' ? entry.size : 0\n            }))\n            .filter(entry => isRepoFileMetadataSafe(entry.path, entry.size));\n\n        repoCaches.set(getRepoCacheKey(repository), {\n            entries: freshEntries,\n            timestamp: Date.now(),\n            branch\n        });\n        logWithTimestamp(`Cached ${freshEntries.length} files from ${repository.label}.`);\n    } catch (error: any) {\n        logWithTimestamp(`Error refreshing repository cache for ${repository.label}.`, 'error', error);\n        repoCaches.delete(getRepoCacheKey(repository));\n    }\n}\n\nasync function ensureRepoCache(repository: SnippetRepository): Promise<RepoCache | undefined> {\n    if (isRepositoryOnCooldown(repository)) {\n        const key = getRepoCacheKey(repository);\n        const until = repoCooldowns.get(key) ?? 0;\n        logWithTimestamp(\n            `${repository.label} is on cooldown until ${new Date(until).toLocaleTimeString()}. Skipping.`,\n            'warn'\n        );\n        return undefined;\n    }\n\n    const cacheKey = getRepoCacheKey(repository);\n    const cache = repoCaches.get(cacheKey);\n    const now = Date.now();\n\n    if (!cache || (now - cache.timestamp > REPO_CACHE_DURATION_MS) || cache.entries.length === 0) {\n        await refreshRepoCache(repository);\n    }\n\n    return repoCaches.get(cacheKey);\n}\n\nasync function tryFetchFromRepository(\n    repository: SnippetRepository,\n    normalizedLang: string,\n    extensions: string[]\n): Promise<{ code: string; languageId: string } | undefined> {\n    const cache = await ensureRepoCache(repository);\n    if (!cache || cache.entries.length === 0) {\n        logWithTimestamp(`Repository cache empty for ${repository.label}.`, 'warn');\n        return undefined;\n    }\n\n    const { entries, branch } = cache;\n    const repoLabel = repository.label;\n    const candidatePool = extensions.length > 0\n        ? entries.filter(entry => extensions.some(ext => entry.path.toLowerCase().endsWith(ext)))\n        : entries;\n\n    if (candidatePool.length === 0) {\n        logWithTimestamp(`No files with extensions ${extensions.join(', ')} in ${repoLabel}.`, 'warn');\n        if (!repository.languages.includes(normalizedLang)) {\n            return undefined;\n        }\n    }\n\n    const selectionPool = candidatePool.length > 0 ? candidatePool : entries;\n    if (selectionPool.length === 0) {\n        logWithTimestamp(`No entries available in ${repoLabel}.`, 'warn');\n        return undefined;\n    }\n\n    const attempts = Math.min(MAX_REPO_ATTEMPTS, selectionPool.length);\n    const shuffledEntries = shuffle(selectionPool).slice(0, attempts);\n\n    for (const entry of shuffledEntries) {\n        try {\n            const rawUrl = buildRawUrl(repository, branch, entry.path);\n            const response = await fetch(rawUrl);\n            if (!response.ok) {\n                logWithTimestamp(`Failed to download ${entry.path} from ${repoLabel}.`, 'warn');\n                removeRepoFileFromCache(repository, entry.path);\n                continue;\n            }\n\n            const content = await response.text();\n            if (!isContentSafe(content)) {\n                logWithTimestamp(`File flagged as unsafe: ${entry.path} (${repoLabel}).`, 'warn');\n                removeRepoFileFromCache(repository, entry.path);\n                continue;\n            }\n\n            const finalCode = content.length > 20000\n                ? '// Repository content is too large to display.'\n                : content;\n\n            const inferredLanguage = inferLanguageFromPath(entry.path) ?? normalizedLang ?? 'plaintext';\n            const languageMatches = inferredLanguage === normalizedLang;\n            const prefixMessage = languageMatches\n                ? ''\n                : `// Could not find a '${normalizedLang}' file. Displaying '${inferredLanguage}'.\\n\\n`;\n\n            const licenseHeader = buildLicenseHeader(repository, branch, entry.path);\n\n            logWithTimestamp(`Loaded snippet from ${entry.path} (${repoLabel}).`);\n            lastRepositoryKey = getRepoCacheKey(repository);\n            return {\n                code: licenseHeader + prefixMessage + finalCode,\n                languageId: inferredLanguage\n            };\n        } catch (error: any) {\n            logWithTimestamp(`Failed to process ${entry.path} from ${repoLabel}.`, 'warn', error);\n            removeRepoFileFromCache(repository, entry.path);\n        }\n    }\n\n    return undefined;\n}\n\nasync function fetchRandomRepoSnippet(languageId: string): Promise<{ code: string; languageId: string }> {\n    const normalizedLang = normalizeLanguageId(languageId);\n    const extensions = getExtensionsForLanguage(normalizedLang);\n\n    const preferredRepos = LANGUAGE_TO_REPOSITORIES[normalizedLang] ?? [];\n    const preferredKeys = new Set(preferredRepos.map(repo => getRepoCacheKey(repo)));\n    const fallbackRepos = SNIPPET_REPOSITORIES.filter(repo => !preferredKeys.has(getRepoCacheKey(repo)));\n\n    const filteredPreferred = preferredRepos.filter(repo => getRepoCacheKey(repo) !== lastRepositoryKey);\n    const filteredFallback = fallbackRepos.filter(repo => getRepoCacheKey(repo) !== lastRepositoryKey);\n\n    const repositoriesToTry: SnippetRepository[] = [\n        ...shuffle(filteredPreferred.length > 0 ? filteredPreferred : []),\n        ...shuffle(filteredFallback)\n    ];\n\n    if (lastRepositoryKey) {\n        const lastRepo = SNIPPET_REPOSITORIES.find(repo => getRepoCacheKey(repo) === lastRepositoryKey);\n        if (lastRepo) {\n            repositoriesToTry.push(lastRepo);\n        }\n    }\n\n    for (const repository of repositoriesToTry) {\n        logWithTimestamp(`Trying ${repository.label} for '${normalizedLang}' snippets.`);\n        const result = await tryFetchFromRepository(repository, normalizedLang, extensions);\n        if (result) {\n            return result;\n        }\n    }\n\n    logWithTimestamp('No suitable repository file found after checking all sources. Using fallback snippet.', 'warn');\n    lastRepositoryKey = undefined;\n    return FALLBACK_SNIPPETS[Math.floor(Math.random() * FALLBACK_SNIPPETS.length)];\n}\n\nasync function showScreenSaver(context: vscode.ExtensionContext) {\n    if (webviewPanel) {\n        logWithTimestamp('Screen saver already open. Revealing existing panel.');\n        webviewPanel.reveal(vscode.ViewColumn.One);\n        return;\n    }\n\n    logWithTimestamp('Creating screen saver webview.');\n    webviewPanel = vscode.window.createWebviewPanel(\n        'screenSaver',\n        'Screen Saver',\n        vscode.ViewColumn.One,\n        {\n            enableScripts: true,\n            localResourceRoots: [vscode.Uri.joinPath(context.extensionUri, 'media')]\n        }\n    );\n\n    webviewPanel.webview.html = getWebviewContent(context, webviewPanel.webview);\n\n    webviewPanel.onDidDispose(() => {\n        logWithTimestamp('Screen saver webview disposed.');\n        webviewPanel = undefined;\n    }, null, context.subscriptions);\n\n    webviewPanel.webview.onDidReceiveMessage(async message => {\n        const langId = getActiveOrLastLanguageId();\n        switch (message.command) {\n            case 'exitScreenSaver':\n                logWithTimestamp('Received exit command from webview.');\n                if (webviewPanel) webviewPanel.dispose();\n                break;\n            case 'requestNewGist':\n                logWithTimestamp(`Webview requested new snippet for '${langId}'.`);\n                const newContent = await fetchRandomRepoSnippet(langId);\n                if (webviewPanel) {\n                    webviewPanel.webview.postMessage({ command: 'loadCode', ...newContent });\n                }\n                break;\n        }\n    }, undefined, context.subscriptions);\n\n    const initialLangId = getActiveOrLastLanguageId();\n    const configuration = vscode.workspace.getConfiguration('screenSaver');\n    const typingSpeed = configuration.get<number>('typingSpeed', 40);\n\n    logWithTimestamp(`Loading initial snippet for '${initialLangId}'.`);\n    const initialContent = await fetchRandomRepoSnippet(initialLangId);\n\n    if (webviewPanel) {\n        webviewPanel.webview.postMessage({ command: 'loadCode', typingSpeed, ...initialContent });\n        logWithTimestamp('Initial snippet sent to webview.');\n    }\n}\n\nfunction getWebviewContent(context: vscode.ExtensionContext, webview: vscode.Webview): string {\n    const htmlPath = vscode.Uri.joinPath(context.extensionUri, 'media', 'webview.html');\n    if (!fs.existsSync(htmlPath.fsPath)) {\n        return `<html><body><h1>Error: webview.html not found!</h1></body></html>`;\n    }\n    const baseHtml = fs.readFileSync(htmlPath.fsPath, 'utf8');\n\n    const styleUri = webview.asWebviewUri(vscode.Uri.joinPath(context.extensionUri, 'media', 'styles.css'));\n    const scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(context.extensionUri, 'media', 'main.js'));\n\n    return baseHtml\n        .replace(/\\{\\{cspSource\\}\\}/g, webview.cspSource)\n        .replace(/\\{\\{styleUri\\}\\}/g, styleUri.toString())\n        .replace(/\\{\\{scriptUri\\}\\}/g, scriptUri.toString());\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n    logWithTimestamp('\"coding-screensaver\" is now active.');\n\n    const resetIdleTimer = () => {\n        if (idleTimer) {\n            clearTimeout(idleTimer);\n        }\n        getActiveOrLastLanguageId();\n        if (!vscode.window.state.focused) {\n            logWithTimestamp('Window not focused. Idle timer paused.');\n            return;\n        }\n\n        const configuration = vscode.workspace.getConfiguration('screenSaver');\n        const idleTime = configuration.get<number>('idleTimeSeconds', 300);\n        if (idleTime > 0) {\n            const triggerAt = new Date(Date.now() + idleTime * 1000);\n            logWithTimestamp(\n                `Idle timer armed for ${idleTime} seconds. Scheduled at ${triggerAt.toLocaleTimeString()}.`\n            );\n            idleTimer = setTimeout(() => {\n                logWithTimestamp('Idle timer elapsed. Launching screen saver.');\n                showScreenSaver(context);\n            }, idleTime * 1000);\n        } else {\n            logWithTimestamp('Idle timer disabled via configuration.');\n        }\n    };\n\n    // Reset timer on any text change, selection change, editor change, or scroll.\n    context.subscriptions.push(vscode.workspace.onDidChangeTextDocument(() => resetIdleTimer()));\n    context.subscriptions.push(vscode.window.onDidChangeTextEditorSelection(() => resetIdleTimer()));\n    context.subscriptions.push(vscode.window.onDidChangeActiveTextEditor(() => resetIdleTimer()));\n    context.subscriptions.push(vscode.window.onDidChangeTextEditorVisibleRanges(() => resetIdleTimer())); // For scrolling\n\n    context.subscriptions.push(vscode.window.onDidChangeWindowState(windowState => {\n        if (windowState.focused) {\n            resetIdleTimer();\n        } else {\n            if (idleTimer) clearTimeout(idleTimer);\n            if (webviewPanel) webviewPanel.dispose();\n        }\n    }));\n\n    context.subscriptions.push(vscode.commands.registerCommand('screenSaver.test', () => {\n        showScreenSaver(context);\n    }));\n\n    resetIdleTimer();\n}\n\nexport function deactivate() {\n    if (webviewPanel) webviewPanel.dispose();\n    if (idleTimer) clearTimeout(idleTimer);\n}\n"],
  "mappings": "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",
  "names": []
}
